// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios18.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name UnityBlePlugin
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import CoreBluetooth
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers public class UnityDelegates : ObjectiveC.NSObject {
  public static var OnPeripheralDiscovered: ((Swift.String) -> Swift.Void)?
  public static var OnDiscoveredPeripheralCleared: (() -> Swift.Void)?
  public static var OnPeripheralConnected: ((Swift.String) -> Swift.Void)?
  public static var OnPeripheralDisconnected: ((Swift.String) -> Swift.Void)?
  public static var OnBleErrorDetected: ((Swift.String) -> Swift.Void)?
  public static var OnBleStateChanged: ((Swift.Int) -> Swift.Void)?
  public static var OnDiscoveredServices: ((Swift.String) -> Swift.Void)?
  public static var OnDiscoveredCharacteristics: ((Swift.String) -> Swift.Void)?
  public static var OnWriteCharacteristicCompleted: ((Swift.String, Swift.Int, Swift.String) -> Swift.Void)?
  public static var OnReadRSSICompleted: ((Swift.Int, Swift.String) -> Swift.Void)?
  public static var OnDataReceived: ((Swift.String, Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UnityLogger : ObjectiveC.NSObject {
  public static var OnLog: ((Swift.String) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class UnityBridgeFacade : ObjectiveC.NSObject {
  @objc public static let shared: UnityBlePlugin.UnityBridgeFacade
  @objc public func isScanning() -> Swift.Bool
  @objc public func startScanning(for services: [CoreBluetooth.CBUUID]?, nameFilter: Swift.String? = nil) -> Swift.Int
  @objc public func stopScanning()
  @objc public func connectToPeripheral(withUUID uuid: Foundation.UUID) -> Swift.Int
  @objc public func disconnectFromPeripheral(withUUID uuid: Foundation.UUID) -> Swift.Int
  @objc public func discoverServices(forPeripheral uuid: Foundation.UUID) -> Swift.Int
  @objc public func writeValue(_ value: Foundation.Data, toCharacteristic characteristicUUID: CoreBluetooth.CBUUID, forService serviceUUID: CoreBluetooth.CBUUID, ofPeripheral peripheralUUID: Foundation.UUID) -> Swift.Int
  @objc public func readCharacteristic(withUUID characteristicUUID: CoreBluetooth.CBUUID, forService serviceUUID: CoreBluetooth.CBUUID, ofPeripheral peripheralUUID: Foundation.UUID) -> Swift.Int
  @objc public func subscribeToCharacteristic(withUUID characteristicUUID: CoreBluetooth.CBUUID, forService serviceUUID: CoreBluetooth.CBUUID, ofPeripheral peripheralUUID: Foundation.UUID) -> Swift.Int
  @objc public func unsubscribeFromCharacteristic(withUUID characteristicUUID: CoreBluetooth.CBUUID, forService serviceUUID: CoreBluetooth.CBUUID, ofPeripheral peripheralUUID: Foundation.UUID) -> Swift.Int
  @objc public func registerOnPeripheralDiscovered(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnPeripheralConnected(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnPeripheralDisconnected(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnBleErrorDetected(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnBleStateChanged(_ callback: @escaping (Swift.Int) -> Swift.Void)
  @objc public func registerOnDiscoveredPeripheralCleared(_ callback: @escaping () -> Swift.Void)
  @objc public func registerOnDiscoveredServices(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnDiscoveredCharacteristics(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnLog(_ callback: @escaping (Swift.String) -> Swift.Void)
  @objc public func registerOnWriteCharacteristicCompleted(_ callback: @escaping (Swift.String, Swift.Int, Swift.String) -> Swift.Void)
  @objc public func registerOnReadRSSICompleted(_ callback: @escaping (Swift.Int, Swift.String) -> Swift.Void)
  @objc public func registerOnDataReceived(_ callback: @escaping (Swift.String, Swift.String) -> Swift.Void)
  @objc deinit
}
